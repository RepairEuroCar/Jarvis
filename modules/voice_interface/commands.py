# üìÅ modules/voice_interface/commands.py
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
"""
from dataclasses import asdict
import logging
from typing import Optional

from .config import VoiceConfig
from .interface import VoiceInterface, VoiceStatus
from .utils import save_config, load_config

logger = logging.getLogger(__name__)


async def voice_start(jarvis, args: str = "") -> str:
    """–ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        if not hasattr(jarvis, "voice_interface") or not jarvis.voice_interface:
            config = VoiceConfig()
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if args:
                config_params = parse_args(args)
                for key, value in config_params.items():
                    if hasattr(config, key):
                        setattr(config, key, value)
            
            jarvis.voice_interface = VoiceInterface(jarvis, config)
            save_config(config, "voice_config.json")
        
        status = await jarvis.voice_interface.start()
        return status.message
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}"


async def voice_stop(jarvis, args: str = "") -> str:
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    if hasattr(jarvis, "voice_interface") and jarvis.voice_interface:
        status = await jarvis.voice_interface.stop()
        return status.message
    return "‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"


async def voice_status(jarvis, args: str = "") -> str:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    if hasattr(jarvis, "voice_interface") and jarvis.voice_interface:
        status = jarvis.voice_interface.get_status()
        return str(status)
    return "–ì–æ–ª–æ—Å–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"


async def voice_config(jarvis, args: str = "") -> str:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –ª–µ—Ç—É"""
    if not hasattr(jarvis, "voice_interface") or not jarvis.voice_interface:
        return "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
    
    try:
        config_params = parse_args(args)
        await jarvis.voice_interface.update_config(config_params)
        return "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}"


def parse_args(args: str) -> dict:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    params = {}
    for item in args.split():
        if '=' in item:
            key, value = item.split('=', 1)
            params[key] = try_convert(value)
    return params


def try_convert(value: str):
    """–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤"""
    try:
        return eval(value)
    except:
        return value