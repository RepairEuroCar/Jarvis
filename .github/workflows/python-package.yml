# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 flake8-pyproject black isort pytest \
          coverage pytest-cov pytest-asyncio
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Check formatting and lint
      run: |
        ./scripts/format.sh --check
    - name: Run coverage
      run: |
        pytest --cov=jarvis tests/
        coverage xml -o coverage.xml
        coverage html -d htmlcov
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: coverage.xml
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.python-version }}
        path: coverage.xml
    - name: Upload HTML coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html-${{ matrix.python-version }}
        path: htmlcov/
    - name: Comment coverage results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      env:
        FAIL_UNDER: '80'
      with:
        script: |
          const fs = require('fs');
          const xml = fs.readFileSync('coverage.xml', 'utf8');
          const match = xml.match(/line-rate="([0-9.]+)"/);
          if (!match) {
            core.setFailed('Unable to parse coverage data');
          } else {
            const coverage = parseFloat(match[1]) * 100;
            const threshold = parseFloat(process.env.FAIL_UNDER);
            const diff = coverage - threshold;
            const body = [
              '### Coverage Report',
              `Coverage: **${coverage.toFixed(2)}%**`,
              `Fail-under threshold: **${threshold}%**`,
              `Difference from threshold: **${diff.toFixed(2)}%**`
            ].join('\n');
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
          }
