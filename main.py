import asyncio
import logging
import os
import sys

from jarvis.app import Jarvis

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
current_script_dir = os.path.dirname(os.path.abspath(__file__))
log_path = os.path.join(current_script_dir, "jarvis.log")

logging.basicConfig(
    filename=log_path,
    level=logging.INFO,  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ logging.DEBUG, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å debug —Å–æ–æ–±—â–µ–Ω–∏—è
    format="%(asctime)s [%(levelname)s] - %(module)s:%(lineno)d - %(message)s",  # –î–æ–±–∞–≤–∏–ª module –∏ lineno –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–ª–∞–¥–∫–∏
    datefmt="%Y-%m-%d %H:%M:%S",
)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Å–∫—Ä–∏–ø—Ç—É –≤ sys.path, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
# current_script_path —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ current_script_dir, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ
if current_script_dir not in sys.path:
    sys.path.insert(0, current_script_dir)
    logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å –∫ sys.path: {current_script_dir}")


async def main():
    print("üîß –ó–∞–ø—É—Å–∫ Jarvis...")
    logging.info("üü¢ Jarvis —Å—Ç–∞—Ä—Ç—É–µ—Ç")

    jarvis_instance = (
        None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º None –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ Jarvis
    )
    try:
        jarvis_instance = Jarvis()
        await jarvis_instance.interactive_loop()
    except KeyboardInterrupt:
        print("\nüîï Jarvis –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ Ctrl+C")
        logging.warning("üî¥ –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (KeyboardInterrupt)")
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –≤–∫–ª—é—á–∞—è traceback
        logging.error(
            f"üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ main: {e}", exc_info=True
        )
        # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –≤—ã–≤–µ—Å—Ç–∏ traceback –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        # traceback.print_exc()
    finally:
        print("üö™ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Jarvis...")
        logging.info("üö™ Jarvis –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

        if (
            jarvis_instance
            and hasattr(jarvis_instance, "memory")
            and hasattr(jarvis_instance, "save_memory")
        ):
            print("üìÇ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–º—è—Ç—å...")
            logging.info("üìÇ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞–º—è—Ç—å")
            save_func = jarvis_instance.save_memory
            try:
                # –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ jarvis.py save_memory() —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
                if asyncio.iscoroutinefunction(save_func):
                    # –≠—Ç–∞ –≤–µ—Ç–∫–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å —Ç–µ–∫—É—â–∏–º jarvis.py
                    await save_func()
                    logging.info("‚úÖ –ü–∞–º—è—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ).")
                else:
                    save_func()
                    logging.info("‚úÖ –ü–∞–º—è—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ).")
            except Exception as save_error:
                logging.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏: {save_error}",
                    exc_info=True,
                )
        elif jarvis_instance:
            logging.warning(
                "‚ö†Ô∏è –≠–∫–∑–µ–º–ø–ª—è—Ä Jarvis —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥ save_memory –∏–ª–∏ –∞—Ç—Ä–∏–±—É—Ç memory."
            )
        else:
            logging.warning(
                "‚ö†Ô∏è –≠–∫–∑–µ–º–ø–ª—è—Ä Jarvis –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ."
            )

        print("‚úÖ Jarvis –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")
        logging.info("üîö Jarvis –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")


if __name__ == "__main__":
    # –î–ª—è Windows –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π asyncio, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã
    # if sys.platform == "win32":
    #    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    asyncio.run(main())
